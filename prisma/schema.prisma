generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  name         String
  surname      String
  email        String   @unique
  passwordHash String
  address      String?
  phone        String?
  role         UserRole @default(user)

  provider   String?
  providerId String?

  orders   Order[]
  comments Comment[]
  cart     Cart?
  cartId   String

  createdAt DateTime @default(now())
}

model Cart {
  id String @id @default(cuid())

  token      String
  totalPrice Int    @default(0)

  items  CartItem[]
  orders Order[]
  user   User?      @relation(fields: [userId], references: [id])
  userId String?    @unique
}

model CartItem {
  id String @id @default(cuid())

  quantity Int @default(1)

  product   Product @relation(fields: [productId], references: [id])
  productId String
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
}

model Product {
  id String @id @default(cuid())

  name            String
  description     String
  price           Int
  count           Int
  imageUrls       String[]
  status          Status   @default(inactive)
  discountPercent Int?

  properties    Property[]
  cartItems     CartItem[]
  comments      Comment[]
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId String

  createdAt DateTime @default(now())
}

model Property {
  id String @id @default(cuid())

  name  String
  value String

  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId String
}

model Category {
  id String @id @default(cuid())

  name String @unique

  subcategories Subcategory[]
}

model Subcategory {
  id String @id @default(cuid())

  name String

  products   Product[]
  properties Property[]
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId String

  @@unique([name, categoryId])
}

model Comment {
  id String @id @default(cuid())

  title     String
  comment   String
  starCount Int
  recommend Boolean? @default(false)

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  products  Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
}

model Order {
  id String @id @default(cuid())

  token            String
  name             String
  surname          String
  email            String
  phone            String
  city             String
  department       String
  orderStatus      OrderStatus      @default(inProgress)
  paymentStatus    PaymentStatus    @default(inProgress)
  deliveryWay      DeliveryWays
  deliveryVariants DeliveryVariants @default(department)
  paymentWays      PaymentWays
  cartSnapshot     Json

  comment String?
  cart    Cart    @relation(fields: [cartId], references: [id])
  cartId  String
  user    User    @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
}

enum OrderStatus {
  completed
  inProgress
  confirmed
  denied
}

enum PaymentStatus {
  completed
  inProgress
  denied
}

enum PaymentWays {
  uponReceipt
  privateBank
  cashless
}

enum DeliveryWays {
  novaPoshta
  ukrPoshta
}

enum DeliveryVariants {
  postomat
  department
  courier
}

enum Status {
  active
  inactive
}

enum UserRole {
  user
  admin
  manager
}
